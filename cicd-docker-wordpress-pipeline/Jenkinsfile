pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/Asaf01/ci'
        IMAGE_NAME = 'wordpress'
        DOCKERFILE_DIR = 'cicd-docker-wordpress-pipeline'
        DOCKERHUB_CREDENTIALS = 'dockerhublogin'  
        DOCKERHUB_REPO = 'bendrorasaf/wordpress'
        K8S_REPO_URL = 'https://github.com/Asaf01/WP_PROJECT'
        K8S_FILES_DIR = 'WP_PROJECT/K8S Deployment'
    }

    stages {
        stage('Clone Repository') {
            steps {
                
                git branch: 'main', url: "${REPO_URL}"
            }
        }
        
        stage('Determine Version') {
            steps {
                script {
                    
                    def latestTag = sh(
                        script: """
                        curl -s https://hub.docker.com/v2/repositories/${DOCKERHUB_REPO}/tags/?page_size=1 | grep -oP '"name":\\s*"v\\K\\d+' | sort -nr | head -n1
                        """,
                        returnStdout: true
                    ).trim()

                    
                    def versionNumber = latestTag ? latestTag.toInteger() + 1 : 1
                    env.VERSION = "v${versionNumber}"
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                
                script {
                    dockerImage = docker.build("${DOCKERHUB_REPO}:${VERSION}", "${DOCKERFILE_DIR}")
                }
            }
        }

        stage('Test Docker Image') {
            steps {
                
                script {
                    docker.image("${DOCKERHUB_REPO}:${VERSION}").inside {
                        sh 'echo "Testing the Docker image..." && ls' 
                    }
                }
            }
        }
        
        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', "${DOCKERHUB_CREDENTIALS}") {
                        dockerImage.push("${VERSION}")
                        
                    }
                }
            }
        }

        

        stage('Delete Workspace') {
            steps {
                
                deleteDir()
            }
        }
    }

    post {
        always {
            
            cleanWs()
        }
    }
}
